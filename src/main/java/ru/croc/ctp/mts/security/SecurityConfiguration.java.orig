package ru.croc.ctp.mts.security;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;

import ru.croc.ctp.jxfw.security.facade.AjaxAuthenticationFailureHandler;
import ru.croc.ctp.jxfw.security.facade.AjaxLoginSuccessHandler;
import ru.croc.ctp.jxfw.security.facade.AjaxLogoutSuccessHandler;
import ru.croc.ctp.jxfw.security.facade.Http401UnauthorizedEntryPoint;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
    @SuppressWarnings("unused")
	private static final Logger log = LoggerFactory.getLogger(SecurityConfiguration.class);

    @Autowired
    private AjaxAuthenticationFailureHandler ajaxAuthenticationFailureHandler;

    @Autowired
    private AjaxLogoutSuccessHandler ajaxLogoutSuccessHandler;

    @Inject
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService())
                .passwordEncoder(passwordEncoder());
    }

    @Bean
    public UserDetailsService userDetailsService() {
        return new CustomUserDetailsService();
    }

    /**
     * @return Encoder паролей в системе.
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring()
                .antMatchers("/scripts/**/*.{js,html}")
                .antMatchers("/bower_components/**")
                .antMatchers("/display/index/users/client/vendor/**")
                .antMatchers("/i18n/**")
                .antMatchers("/assets/**")
                .antMatchers("/console/**")
                .antMatchers("/bootloader/**")
                .antMatchers("/**/*.ico")
                .antMatchers("/client/**");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();

        http
                .exceptionHandling()
                .accessDeniedHandler((request, response, accessDeniedException) -> response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Access Denied"))
                .authenticationEntryPoint(authenticationEntryPoint())
                .and()
                .formLogin()
                .usernameParameter("userName")
                .passwordParameter("password")
                .loginPage("/")
                .loginProcessingUrl("/login")
                .successHandler(customAuthenticationSuccessHandler("/"))
                .failureHandler(ajaxAuthenticationFailureHandler)
                .permitAll()
                .and()
                .logout()
                .logoutUrl("/logout")
                .logoutSuccessHandler(ajaxLogoutSuccessHandler)
                .deleteCookies("JSESSIONID")
                .permitAll()
                .and()
                .authorizeRequests()
                .antMatchers("/client/**").permitAll()
                .antMatchers("/bootloader").permitAll()
                .antMatchers("/api/_security/currentUser").permitAll()
                .anyRequest().authenticated()
                .and()
                .headers()
                .frameOptions()
                .disable();
    }

    /**
     * @return Хендлер для успешной аутентификации.
     */
    @Bean
    AjaxLoginSuccessHandler customAuthenticationSuccessHandler(String defaultUrl) {
        return new AjaxLoginSuccessHandler(defaultUrl);
    }

    @Bean
    AuthenticationEntryPoint authenticationEntryPoint() {
        return new Http401UnauthorizedEntryPoint("/");
    }

}
