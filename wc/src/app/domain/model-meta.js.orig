/*
	File was generated by CROC jXFW
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
define(["i18n!./nls/resources"], function (resources) {
	"use strict";

	return {
		enums: {
<<<<<<< local
			Status: {
				vt: "i4",
				flags: false,
				descr: resources["model.Status"],
				members: {
					REGISTRED: {value: 2, descr: resources["model.Status.REGISTRED"]},
					INPROCESS: {value: 4, descr: resources["model.Status.INPROCESS"]},
					CHECKING: {value: 8, descr: resources["model.Status.CHECKING"]},
					FIXPROBLEMS: {value: 16, descr: resources["model.Status.FIXPROBLEMS"]},
					CLOSED: {value: 32, descr: resources["model.Status.CLOSED"]}
				}
			},
			UserRole: {
=======
			TypeAction: {
>>>>>>> other
				vt: "i4",
				flags: false,
				descr: resources["model.TypeAction"],
				members: {
					RemoveAct: {value: 2, descr: resources["model.TypeAction.RemoveAct"]},
					AddAct: {value: 4, descr: resources["model.TypeAction.AddAct"]},
					UpdateAct: {value: 8, descr: resources["model.TypeAction.UpdateAct"]}
				}
			},
<<<<<<< local
=======
			Status: {
				vt: "i4",
				flags: false,
				descr: resources["model.Status"],
				members: {
					REGISTRED: {value: 2, descr: resources["model.Status.REGISTRED"]},
					INPROCESS: {value: 4, descr: resources["model.Status.INPROCESS"]},
					CHECKING: {value: 8, descr: resources["model.Status.CHECKING"]},
					FIXPROBLEMS: {value: 16, descr: resources["model.Status.FIXPROBLEMS"]},
					CLOSED: {value: 32, descr: resources["model.Status.CLOSED"]}
				}
			},
			UserRole: {
				vt: "i4",
				flags: false,
				descr: resources["model.UserRole"],
				members: {
					Analyst: {value: 2, descr: resources["model.UserRole.Analyst"]},
					Developer: {value: 4, descr: resources["model.UserRole.Developer"]},
					LeadDeveloper: {value: 16, descr: resources["model.UserRole.LeadDeveloper"]},
					Manager: {value: 32, descr: resources["model.UserRole.Manager"]},
					Tester: {value: 64, descr: resources["model.UserRole.Tester"]}
				}
			},
>>>>>>> other
			TaskType: {
				vt: "i4",
				flags: false,
				descr: resources["model.TaskType"],
				members: {
					Task: {value: 2, descr: resources["model.TaskType.Task"]},
					Mistake: {value: 4, descr: resources["model.TaskType.Mistake"]},
					Demand: {value: 8, descr: resources["model.TaskType.Demand"]}
				}
			}
		},
		complex: {
		},
		entities: {
<<<<<<< local
			Task: {
				descr: resources["model.Task"],
				props: {
					numberTaskInProject: {descr: resources["model.Task.numberTaskInProject"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.Task.description"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.Task.status"], vt: "enum", flags: false  , nullable: false, ref: "Status"},
					deadline: {descr: resources["model.Task.deadline"], vt: "dateTime" , nullable: false},
					startline: {descr: resources["model.Task.startline"], vt: "dateTime" , nullable: true},
					wastedTime: {descr: resources["model.Task.wastedTime"], vt: "string" , nullable: true, maxLen: 255},
					changedDate: {descr: resources["model.Task.changedDate"], vt: "dateTime" , nullable: true},
					type: {descr: resources["model.Task.type"], vt: "enum", flags: false  , nullable: false, ref: "TaskType"},
					project: {descr: resources["model.Task.project"], vt: "object" , nullable: false, ref: "Project", opposite: "projectTasks"},
					author: {descr: resources["model.Task.author"], vt: "object" , nullable: true, ref: "User"},
					taskPerformer: {descr: resources["model.Task.taskPerformer"], vt: "object" , nullable: false, ref: "User", opposite: "performentTasks"},
					lastEditor: {descr: resources["model.Task.lastEditor"], vt: "object" , nullable: true, ref: "User"},
					lowerPerformentTask: {descr: resources["model.Task.lowerPerformentTask"], vt: "object" , nullable: true, ref: "Task", opposite: "tasks"},
					tasks: {descr: resources["model.Task.tasks"], vt: "object" , nullable: true, ref: "Task", opposite: "lowerPerformentTask", many: true, lazyLoad: true},
					isCheck: {descr: resources["model.Task.isCheck"], vt: "boolean" , nullable: true}
				}
			},
=======
>>>>>>> other
			Project: {
				descr: resources["model.Project"],
				props: {
					description: {descr: resources["model.Project.description"], vt: "string" , nullable: true, maxLen: 255},
					title: {descr: resources["model.Project.title"], vt: "string" , nullable: false, maxLen: 255},
					codeProject: {descr: resources["model.Project.codeProject"], vt: "string" , nullable: false, maxLen: 255},
					taskCounter: {descr: resources["model.Project.taskCounter"], vt: "i4" , nullable: true, init: 0},
					projectTasks: {descr: resources["model.Project.projectTasks"], vt: "object" , nullable: true, ref: "Task", opposite: "project", many: true, lazyLoad: true},
					crew: {descr: resources["model.Project.crew"], vt: "object" , nullable: true, ref: "ProjectRole", opposite: "numberProject", many: true, lazyLoad: true}
				}
			},
			ProjectRole: {
				descr: resources["model.ProjectRole"],
				props: {
					userRole: {descr: resources["model.ProjectRole.userRole"], vt: "enum", flags: false  , nullable: true, ref: "UserRole"},
					numberProject: {descr: resources["model.ProjectRole.numberProject"], vt: "object" , nullable: true, ref: "Project", opposite: "crew"},
					projectUser: {descr: resources["model.ProjectRole.projectUser"], vt: "object" , nullable: true, ref: "User", opposite: "roleUserProject"}
				}
<<<<<<< local
			},
			EditeTask: {
				descr: resources["model.EditeTask"],
				props: {
					taskId: {descr: resources["model.EditeTask.taskId"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.EditeTask.description"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.EditeTask.status"], vt: "string" , nullable: true, maxLen: 255},
					deadline: {descr: resources["model.EditeTask.deadline"], vt: "dateTime" , nullable: true},
					type: {descr: resources["model.EditeTask.type"], vt: "enum", flags: false  , nullable: true, ref: "TaskType"},
					project: {descr: resources["model.EditeTask.project"], vt: "object" , nullable: true, ref: "Project"},
					taskPerformer: {descr: resources["model.EditeTask.taskPerformer"], vt: "object" , nullable: true, ref: "User"},
					isCheck: {descr: resources["model.EditeTask.isCheck"], vt: "boolean" , nullable: true}
				}
			},
			User: {
				descr: resources["model.User"],
				props: {
					isAdmin: {descr: resources["model.User.isAdmin"], vt: "boolean" , nullable: false},
					firstName: {descr: resources["model.User.firstName"], vt: "string" , nullable: false, maxLen: 255},
					lastName: {descr: resources["model.User.lastName"], vt: "string" , nullable: false, maxLen: 255},
					middleName: {descr: resources["model.User.middleName"], vt: "string" , nullable: false, maxLen: 255},
					login: {descr: resources["model.User.login"], vt: "string" , nullable: false, maxLen: 30},
					password: {descr: resources["model.User.password"], vt: "string" , nullable: false, minLen: 6, maxLen: 2147483647},
					performentTasks: {descr: resources["model.User.performentTasks"], vt: "object" , nullable: true, ref: "Task", opposite: "taskPerformer", many: true, lazyLoad: true},
					roleUserProject: {descr: resources["model.User.roleUserProject"], vt: "object" , nullable: true, ref: "ProjectRole", opposite: "projectUser", many: true, lazyLoad: true}
				}
			},
			ChangeLog: {
				descr: resources["model.ChangeLog"],
				props: {
					changedDate: {descr: resources["model.ChangeLog.changedDate"], vt: "dateTime" , nullable: false},
					typeAction: {descr: resources["model.ChangeLog.typeAction"], vt: "enum", flags: false  , nullable: false, ref: "TypeAction"},
					typeEntity: {descr: resources["model.ChangeLog.typeEntity"], vt: "string" , nullable: false, maxLen: 255},
					entityId: {descr: resources["model.ChangeLog.entityId"], vt: "string" , nullable: true, maxLen: 255},
					author: {descr: resources["model.ChangeLog.author"], vt: "string" , nullable: false, maxLen: 255}
				}
=======
			},
			User: {
				descr: resources["model.User"],
				props: {
					isAdmin: {descr: resources["model.User.isAdmin"], vt: "boolean" , nullable: false},
					firstName: {descr: resources["model.User.firstName"], vt: "string" , nullable: false, maxLen: 255},
					lastName: {descr: resources["model.User.lastName"], vt: "string" , nullable: false, maxLen: 255},
					middleName: {descr: resources["model.User.middleName"], vt: "string" , nullable: false, maxLen: 255},
					login: {descr: resources["model.User.login"], vt: "string" , nullable: false, maxLen: 30},
					password: {descr: resources["model.User.password"], vt: "string" , nullable: false, minLen: 6, maxLen: 2147483647},
					performentTasks: {descr: resources["model.User.performentTasks"], vt: "object" , nullable: true, ref: "Task", opposite: "taskPerformer", many: true, lazyLoad: true},
					roleUserProject: {descr: resources["model.User.roleUserProject"], vt: "object" , nullable: true, ref: "ProjectRole", opposite: "projectUser", many: true, lazyLoad: true}
				}
			},
			EditeTask: {
				descr: resources["model.EditeTask"],
				props: {
					taskId: {descr: resources["model.EditeTask.taskId"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.EditeTask.description"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.EditeTask.status"], vt: "string" , nullable: true, maxLen: 255},
					deadline: {descr: resources["model.EditeTask.deadline"], vt: "dateTime" , nullable: true},
					type: {descr: resources["model.EditeTask.type"], vt: "enum", flags: false  , nullable: true, ref: "TaskType"},
					project: {descr: resources["model.EditeTask.project"], vt: "object" , nullable: true, ref: "Project"},
					taskPerformer: {descr: resources["model.EditeTask.taskPerformer"], vt: "object" , nullable: true, ref: "User"},
					isCheck: {descr: resources["model.EditeTask.isCheck"], vt: "boolean" , nullable: true}
				}
			},
			ChangeLog: {
				descr: resources["model.ChangeLog"],
				props: {
					changedDate: {descr: resources["model.ChangeLog.changedDate"], vt: "dateTime" , nullable: false},
					typeAction: {descr: resources["model.ChangeLog.typeAction"], vt: "enum", flags: false  , nullable: false, ref: "TypeAction"},
					typeEntity: {descr: resources["model.ChangeLog.typeEntity"], vt: "string" , nullable: false, maxLen: 255},
					entityId: {descr: resources["model.ChangeLog.entityId"], vt: "string" , nullable: true, maxLen: 255},
					author: {descr: resources["model.ChangeLog.author"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			Task: {
				descr: resources["model.Task"],
				props: {
					numberTaskInProject: {descr: resources["model.Task.numberTaskInProject"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.Task.description"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.Task.status"], vt: "enum", flags: false  , nullable: false, ref: "Status"},
					deadline: {descr: resources["model.Task.deadline"], vt: "dateTime" , nullable: false},
					startline: {descr: resources["model.Task.startline"], vt: "dateTime" , nullable: true},
					wastedTime: {descr: resources["model.Task.wastedTime"], vt: "string" , nullable: true, maxLen: 255},
					changedDate: {descr: resources["model.Task.changedDate"], vt: "dateTime" , nullable: true},
					type: {descr: resources["model.Task.type"], vt: "enum", flags: false  , nullable: false, ref: "TaskType"},
					project: {descr: resources["model.Task.project"], vt: "object" , nullable: false, ref: "Project", opposite: "projectTasks"},
					author: {descr: resources["model.Task.author"], vt: "object" , nullable: true, ref: "User"},
					taskPerformer: {descr: resources["model.Task.taskPerformer"], vt: "object" , nullable: false, ref: "User", opposite: "performentTasks"},
					lastEditor: {descr: resources["model.Task.lastEditor"], vt: "object" , nullable: true, ref: "User"},
					lowerPerformentTask: {descr: resources["model.Task.lowerPerformentTask"], vt: "object" , nullable: true, ref: "Task", opposite: "tasks"},
					tasks: {descr: resources["model.Task.tasks"], vt: "object" , nullable: true, ref: "Task", opposite: "lowerPerformentTask", many: true, lazyLoad: true},
					isCheck: {descr: resources["model.Task.isCheck"], vt: "boolean" , nullable: true}
				}
>>>>>>> other
			}
		}
	}
});
